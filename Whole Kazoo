# -*- coding: utf-8 -*-
"""
Created on 01/28/2021

@author: maxcurie
@editor: matthewtennery
"""

import pandas as pd
import numpy as np
from mpi4py import MPI
comm = MPI.COMM_WORLD
rank = comm.Get_rank()
from DispersionRelationDeterminantFullConductivityZeff import Dispersion

csvfile_name='Scan_list_template.csv'

def Dispersion_calc(path,filename):
    
    print("Testing ... hello from rank: ", rank)
    gamma_complex_temp=0
    gamma_complex=[]
    data=pd.read_csv(path+'/'+filename)  	#data is a dataframe. 

    nu=data['nu']
    nx=len(nu)
    zeff=data['zeff'][0]
    eta=data['eta']
    shat=data['shat']
    beta=data['beta']
    ky=data['ky']
    mu=data['mu']
    xstar=data['xstar'][0]
    ModIndex=1
    
    if rank == 0:
        for i in range(nx):
            print(nu, eta, shat, beta, ky, mu, zeff, ModIndex, xstar)   #prior 3 lines for full data list, amend if necessary. Should default be "off"?
            #gamma_complex.append(1) ?????present from inital code, unsure of purpose
              
    for i in range(nx):
        if rank == i:     
            gamma_complex_temp=Dispersion(nu[i], eta[i], shat[i], beta[i], ky[i], mu[i], zeff, ModIndex, xstar)  
            gamma_complex.append(gamma_complex_temp)
        
    
    gamma_complex=np.asarray(gamma_complex)
    #factor=np.asarray(factor)
    gamma=gamma_complex.imag
    omega=gamma_complex.real

    if rank == 0:
        ICHI = data['gamma(kHz)']=gamma*data['omn(kHz)']     #setting to  a single processor. set as object, broadcast object.
        comm.bcast(ICHI, root=0)
    else:
        ICHI = None
        
    if rank == 1:
        NI = data['gamma(cs/a)']=data['gamma(kHz)']*data['kHz_to_cs_a']    
        comm.bcast(NI, root=1)
    else:
        NI = None
        
    if rank == 2:
        SAN = data['omega_plasma(kHz)']=omega*data['omn(kHz)']    
        comm.bcast(SAN, root=2)
    else:
        SAN = None    
    
    if rank == 3:
        YON = data['omega_lab(kHz)']=data['omega_plasma(kHz)']+data['omega_star_lab(kHz)']-data['omega_star_plasma(kHz)']  
        comm.bcast(YON, root=3)
    else:
        YON = None    
    

    data.to_csv(path+'/0_calc_'+filename,index=False)

    return gamma,omega

data=pd.read_csv(csvfile_name)      #data is a dataframe. 
Path_list=data['Path']
profile_name_list=data['profile_name']

for i in range(len(profile_name_list)):
    filename='MTM_dispersion_n_scan'+profile_name_list[i]+'.csv'
    gamma,omega=Dispersion_calc(Path_list[i],filename)
